---
import Layout from '../../layouts/BaseLayout.astro';
import { getEntryBySlug, getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((p) => ({
    params: { slug: p.slug },
    props:  { entry: p },   // pass the collection entry in at build time
  }));
}

const { slug } = Astro.params;
const { entry: provided } = Astro.props;

// Prefer the pre-passed entry (SSG). Fallback to runtime lookup in dev.
const entry = provided ?? (slug ? await getEntryBySlug('blog', slug) : null);

if (!entry) throw new Error(slug ? `No blog post for slug "${slug}"` : 'Missing slug');


const { Content } = await entry.render();
const data = entry.data ?? {};

/* -------- Hero controls from front-matter (optional) ----------
  heroStyle: '', 'full', 'half', 'thumb', 'nocrop'
  heroAlign: 'top' | 'center' | 'bottom'
  heroMax:   number (px) height cap for cover modes
---------------------------------------------------------------*/
const heroSrc =
  (typeof data.image === 'object' && data.image?.src) ||
  (typeof data.image === 'string' ? data.image : '') ||
  (typeof data.thumbnail === 'string' ? data.thumbnail : '');
const heroAlt =
  (typeof data.image === 'object' && data.image?.alt) ||
  data.title || 'Article image';

const heroStyle = (data.heroStyle ?? '').toString();         // '', full, half, thumb, nocrop
const heroAlign = (data.heroAlign ?? 'center').toString();   // top, center, bottom
const heroMax   = Number.isFinite(data.heroMax) ? data.heroMax : 480;

const prettyDate = data.date ? new Date(data.date).toLocaleDateString() : '';
---

<Layout title={data.title} description={data.description ?? ''}>
  <article class="tn-article">
    <header class="tn-head">
      <h1 class="tn-title">{data.title}</h1>

      <div class="tn-meta">
        {prettyDate && <time datetime={data.date}>{prettyDate}</time>}
        {data.tags?.length ? (
          <>
            <span class="tn-dot" aria-hidden="true">•</span>
            <ul class="tn-tags" role="list">
              {data.tags.map((t) => {
                const q = encodeURIComponent(String(t).toLowerCase());
                return (
                  <li>
                    <a class="tn-tag" href={`/trail-notes?tag=${q}`} aria-label={`See more posts tagged ${t}`}>
                      {t}
                    </a>
                  </li>
                );
              })}
            </ul>
          </>
        ) : null}
      </div>

      {heroSrc && (
        <figure
          class={`tn-hero ${heroStyle ? `size-${heroStyle}` : ''} ${heroAlign ? `align-${heroAlign}` : ''}`}
          style={`--tn-hero-max:${heroMax}px;`}
        >
          <img src={heroSrc} alt={heroAlt} loading="eager" />
        </figure>
      )}
    </header>

    <main class="tn-body">
      <div class="tn-prose">
        <Content />
      </div>
    </main>
  </article>

  <div class="tn-progress" id="tnProgress" />

  <script>
    const bar = document.getElementById('tnProgress');
    const onScroll = () => {
      const el = document.querySelector('.tn-article');
      if (!el) return;
      const h = el.scrollHeight - window.innerHeight;
      const p = h > 0 ? Math.max(0, Math.min(1, window.scrollY / h)) : 0;
      bar.style.transform = `scaleX(${p})`;
    };
    document.addEventListener('scroll', onScroll, { passive: true });
    onScroll();
  </script>

  <!-- Local, scoped styles -->
  <style>
    /* page container */
    .tn-article{ width:min(1120px, 90vw); margin:32px auto 96px; }
    .tn-head{ margin:8px 0 18px; }

    /* title — Trail Notes vibe, local only */
    .tn-title{
      margin:0 0 .35rem;
      font-size: clamp(2rem, 3.6vw, 3.25rem);
      line-height:1.05;
      letter-spacing:.02em;
      font-weight:900;
      color:#FFC53D;                 /* solid amber (or #FF6A00 for orange) */
  text-shadow: 0 2px 0 rgba(0,0,0,.35);
    }

    /* meta + tags */
    .tn-meta{ display:flex; align-items:center; flex-wrap:wrap; gap:.5rem .75rem; color:#cfcfcf; font-weight:600; margin-bottom:12px; }
    .tn-dot{ opacity:.6; }
    .tn-tags{ display:flex; gap:.45rem; padding:0; margin:0; list-style:none; }
    .tn-tag{
      display:inline-flex; align-items:center; justify-content:center;
      background:#1a1b1d; border:1px solid #26282b;
      padding:.28rem .6rem; border-radius:999px; color:#e7e7e7;
      font-size:.85rem; font-weight:800; text-decoration:none;
      transition:border-color .18s ease, transform .18s ease, box-shadow .18s ease;
    }
    .tn-tag:hover{ border-color:#34363a; transform:translateY(-1px); }
    .tn-tag:focus-visible{ outline:none; box-shadow:0 0 0 4px rgba(255,139,26,.35); border-color:#FF8B1A; }

    /* hero (unique classes, no global collisions) */
    .tn-hero{ margin:12px 0 2px; border-radius:18px; overflow:hidden; box-shadow:0 20px 40px rgba(0,0,0,.35); }
    .tn-hero img{
      display:block; width:90%; height:auto; margin:0 auto;
      max-height: var(--tn-hero-max, 480px);
      object-fit: cover; object-position: 50% 50%;
      filter: saturate(.98) contrast(1.03);
    }
    /* align & size modifiers */
    .tn-hero.align-top img{ object-position:50% 0%; }
    .tn-hero.align-center img{ object-position:50% 50%; }
    .tn-hero.align-bottom img{ object-position:50% 100%; }
    .tn-hero.size-full  img{ width:100%; max-height:600px; }
    .tn-hero.size-half  img{ width:60%;  max-height:360px; }
    .tn-hero.size-thumb img{ width:320px; max-height:none; }
    .tn-hero.size-nocrop img{
      width:90%; max-height:none; object-fit:contain; background:#0f1011; padding:6px;
    }

    /* body + prose wrapper */
    .tn-body{ margin-top:12px; }
    .tn-prose{ width:min(72ch,100%); margin:18px auto 0; color:#e9e9e9; }
    .tn-prose p{ margin:1.05rem 0; color:#e2e2e2; }

    /* progress bar */
    .tn-progress{
      position:fixed; left:0; top:0; width:100%; height:3px;
      background:linear-gradient(90deg,#FFB224,#FF6A00);
      transform-origin:0 50%; transform:scaleX(0);
      z-index:9999; box-shadow:0 0 12px rgba(255,139,26,.06);
    }
  </style>

  <!-- One small global block so styles reach Markdown-generated headings -->
  <style is:global>
    /* H2/H3 inside this page’s Markdown (and their autolink anchors) */
    .tn-article .tn-prose h2,
    .tn-article .tn-prose h3{
      font-weight:800; letter-spacing:.2px;
      margin:1.6rem 0 .6rem; scroll-margin-top:84px;
    }
    /* choose your palette: orange/amber hierarchy */
    .tn-article .tn-prose h2{ color:#FFF; }   /* orange color:#FF6A00 */
    .tn-article .tn-prose h3{ color:#FFC53D; }   /* amber */

    /* ensure autolinked headings inherit the heading color */
    .tn-article .tn-prose h2 > a,
    .tn-article .tn-prose h3 > a,
    .tn-article .tn-prose h2 > a:visited,
    .tn-article .tn-prose h3 > a:visited{ color:inherit; text-decoration:none; }
  </style>
</Layout>
