---
/* src/pages/seo/item/[slug].astro */
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { loadAllPoints } from "../../../lib/load-data";

 
export const prerender = false;


const { slug } = Astro.params;
const all = await loadAllPoints(Astro.url.origin);

/* ---------- Helpers ---------- */
const slugify = (s: unknown) =>
  String(s ?? "")
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)/g, "");

const prettyState = (st?: string) => {
  const N: Record<string, string> = {
    al:"Alabama", ak:"Alaska", az:"Arizona", ar:"Arkansas", ca:"California",
    co:"Colorado", ct:"Connecticut", de:"Delaware", fl:"Florida", ga:"Georgia",
    hi:"Hawaii", id:"Idaho", il:"Illinois", in:"Indiana", ia:"Iowa",
    ks:"Kansas", ky:"Kentucky", la:"Louisiana", me:"Maine", md:"Maryland",
    ma:"Massachusetts", mi:"Michigan", mn:"Minnesota", ms:"Mississippi",
    mo:"Missouri", mt:"Montana", ne:"Nebraska", nv:"Nevada",
    nh:"New Hampshire", nj:"New Jersey", nm:"New Mexico", ny:"New York",
    nc:"North Carolina", nd:"North Dakota", oh:"Ohio", ok:"Oklahoma",
    or:"Oregon", pa:"Pennsylvania", ri:"Rhode Island", sc:"South Carolina",
    sd:"South Dakota", tn:"Tennessee", tx:"Texas", ut:"Utah",
    vt:"Vermont", va:"Virginia", wa:"Washington", wv:"West Virginia",
    wi:"Wisconsin", wy:"Wyoming", dc:"District of Columbia", unknown:"Unknown"
  };
  const k = (st || "unknown").toLowerCase() as keyof typeof N;
  return N[k] || "Unknown";
};

const buildSlug = (p: any) => {
  if (p.slug) return p.slug;
  const bits = [slugify(p.name || ""), p.id ?? p.usfsId ?? p._id ?? p.rec_id ?? ""].filter(Boolean);
  return bits.join("--");
};

/* ---------- Pick the point ---------- */
const { item: provided } = Astro.props;
const point = provided ?? all.find((p: any) => buildSlug(p) === slug);

if (!point) throw new Error("Point not found");

const lat = Number(point.lat);
const lon = Number(point.lon);
const stateAbbr = (point.state || "").toLowerCase();
const statePretty = prettyState(stateAbbr);
const typeLabel = (point.type || "freecamp").replace(/_/g, " ");

/* ---------- Pill chips ---------- */
const chips: string[] = [];
if (point.water === true || /^yes/i.test(String(point.water))) chips.push("Water available");
if (point.water === false || /^no/i.test(String(point.water))) chips.push("No water is available");
if (point.restroom === true || /toilet|restroom/i.test(String(point.bathrooms || ""))) chips.push("Restrooms available");
if (point.restroom === false) chips.push("No restroom available");
if (point.fee === 0 || /^no\s*fee$/i.test(String(point.fee || "")) || point.free === true) chips.push("No Fee");
chips.push(`Source: ${point.source || "custom"}`);

/* ---------- Nearby (~8km) ---------- */
const toRad = (d: number) => (d * Math.PI) / 180;
const distKm = (a: any, b: any) => {
  const R = 6371;
  const dLat = toRad(b.lat - a.lat);
  const dLon = toRad(b.lon - a.lon);
  const s1 =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(toRad(a.lat)) * Math.cos(toRad(b.lat)) *
    Math.sin(dLon / 2) ** 2;
  return 2 * R * Math.asin(Math.sqrt(s1));
};
const here = { lat, lon };
const nearbyFull = all
  .filter((p: any) => p !== point && p.lat && p.lon)
  .map((p: any) => ({ p, km: distKm(here, { lat: Number(p.lat), lon: Number(p.lon) }) }))
  .filter(({ km }) => km <= 8)
  .sort((a, b) => a.km - b.km)
  .slice(0, 12);

const nearbyList = nearbyFull.map(({ p, km }) => ({
  name: p.name,
  lat: Number(p.lat),
  lon: Number(p.lon),
  type: p.type || "poi",
  slug: buildSlug(p),
  km: Number(km.toFixed(2))
}));

/* ---------- Forecast (Open-Meteo) ---------- */
let forecast: any = null;
try {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=temperature_2m_max,temperature_2m_min,precipitation_probability_max,wind_speed_10m_max&temperature_unit=fahrenheit&windspeed_unit=mph&timezone=auto`;
  const res = await fetch(url);
  if (res.ok) forecast = await res.json();
} catch {}
---

<BaseLayout title={point.name}>
  <div class="seo-item">
    <!-- HERO -->
    <section class="hero">
      <div class="hero-art"></div>
      <div class="hero-content container">
        <div class="kicker">{typeLabel}</div>
        <h1>{point.name}</h1>
        <div class="pills">
          {stateAbbr && <span class="pill">{statePretty}</span>}
          {chips.map(c => <span class="pill pill--gold">{c}</span>)}
        </div>
      </div>
    </section>

    <!-- CTA / BACKLINK -->
    <section class="cta container">
      <a class="btn btn-primary" href={`https://www.google.com/maps/search/?api=1&query=${lat},${lon}`} target="_blank" rel="noopener">Open in Google Maps</a>
      <a class="btn btn-hollow"  href={`https://maps.apple.com/?ll=${lat},${lon}`} target="_blank" rel="noopener">Open in Apple Maps</a>
      <div class="spacer"></div>
      <a class="backlink" href={`/seo/free-camping/${stateAbbr || "al"}/1`}>&larr; Back to Free Camping in {statePretty}</a>
    </section>

    <!-- SECTION 1: Details (L) + USGS Topo (R) -->
    <section class="grid container">
      <div class="card">
        <h2>About this place</h2>
        {(point.subtitle || point.location) && (
          <p class="muted">{String(point.subtitle || point.location)}</p>
        )}

        <!-- Quick facts -->
        <div class="facts">
          <div><label>Latitude</label><div>{isFinite(lat) ? lat.toFixed(5) : "â€”"}</div></div>
          <div><label>Longitude</label><div>{isFinite(lon) ? lon.toFixed(5) : "â€”"}</div></div>
          {point.elev && <div><label>Elevation</label><div>{point.elev} m</div></div>}
          {(point.sites || point.site_count) && (
            <div><label>Sites</label><div>{point.sites ?? point.site_count}</div></div>
          )}
          {point.fee != null && (
            <div><label>Fee</label><div>{String(point.fee)}</div></div>
          )}
          {(point.water != null || point.water === "") && (
            <div><label>Water</label><div>{String(point.water === true ? "Yes" : point.water === false ? "No" : point.water || "â€”")}</div></div>
          )}
          {(point.restroom != null || point.bathrooms) && (
            <div><label>Bathrooms</label><div>{String(point.restroom === true ? "Yes" : point.restroom === false ? "No" : point.bathrooms || "â€”")}</div></div>
          )}
        </div>

        {(point.fee_description || point.desc || point.description) && (
          <section class="desc">
            <h3>More details</h3>
            {point.fee_description && <p><strong>Fees:</strong> {String(point.fee_description)}</p>}
            <p>{String(point.desc || point.description || "")}</p>
          </section>
        )}

        {point.directions && (
          <section class="desc">
            <h3>Directions</h3>
            <p>{String(point.directions)}</p>
          </section>
        )}
      </div>

      <div class="card mapcard">
        <div class="maptitle">
          <span>USGS Topo</span>
          <span class="muted">Good road labels</span>
        </div>
        <div id="map1" class="map" aria-label="USGS Topo map"></div>
      </div>
    </section>

    <!-- SECTION 2: Nearby list (L) + Relief / Topo (R) -->
    <section class="grid container">
      <div class="card">
        <h2>Nearby (â‰ˆ 5 miles)</h2>
        <p class="muted">Quick hits within ~8 km.</p>
        <div class="nearby">
          {nearbyList.length
            ? nearbyList.map(n => (
                <a class="nearby-card" href={`/seo/item/${n.slug}`}>
                  <div class="nearby-title">{n.name}</div>
                  <div class="nearby-meta">{(n.type || "poi")} â€¢ {n.km} km</div>
                </a>
              ))
            : <p class="muted">Nothing else close by.</p>
          }
        </div>
      </div>

      <div class="card mapcard">
        <div class="maptitle">
          <span>Relief / Topo</span>
          <span class="muted">Great for terrain & contours</span>
        </div>
        <div id="map2" class="map" aria-label="Topo map with nearby points"></div>
      </div>
    </section>

    <!-- SECTION 3: Weather (L) + Windy Radar (R) -->
    <section class="grid container">
      <div class="card">
        <h2>Weather (5-day)</h2>
        {forecast?.daily ? (
          <div class="weather">
            {forecast.daily.time.slice(0, 5).map((t: string, i: number) => (
              <div class="day">
                <div class="d">
                  {new Date(t).toLocaleDateString(undefined, { weekday: "short", month: "short", day: "numeric" })}
                </div>
                <div class="t">
                  {Math.round(forecast.daily.temperature_2m_min[i])}Â° / {Math.round(forecast.daily.temperature_2m_max[i])}Â°
                </div>
                <div class="m">
                  ðŸ’¨ {Math.round(forecast.daily.wind_speed_10m_max[i])} mph â€¢ ðŸŒ§ {forecast.daily.precipitation_probability_max[i] ?? 0}%
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p class="muted">Forecast via Open-Meteo. (Temporarily unavailable.)</p>
        )}
        <p class="muted tiny">Forecast via Open-Meteo.</p>
      </div>

      <div class="card mapcard">
        <div class="maptitle">
          <span>Live Radar</span>
          <span class="muted">Windy embed (no sign-in)</span>
        </div>
        <iframe
          class="radar"
          loading="lazy"
          src={`https://embed.windy.com/embed2.html?lat=${lat}&lon=${lon}&detailLat=${lat}&detailLon=${lon}&zoom=8&level=surface&overlay=rain&menu=&message=true&marker=true&calendar=&pressure=&type=map&location=coordinates&detail=&metricRain=mm&metricTemp=%C2%B0F&radarRange=-1`}
          width="100%" height="360" frameborder="0">
        </iframe>
      </div>
    </section>
  </div>

  <!-- Leaflet only on this page -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" defer></script>

  <script
    define:vars={{
      lat, lon,
      nearbyList
    }}
  >
    // Guard against TDZ
    const LAT = lat, LON = lon;
    const NEARBY = nearbyList || [];

    const MAX_Z = 14;   // <- cap zoom to avoid missing tiles on OpenTopo, etc.
    const START_Z = 12;

    function makeBaseMap(id) {
      const map = L.map(id, { scrollWheelZoom: false, zoomControl: true });
      // resize once mounted so Leaflet measures correctly inside cards
      setTimeout(() => map.invalidateSize(), 60);
      return map;
    }

    function addTileLayer(map, url, attribution, maxZoom = MAX_Z) {
      L.tileLayer(url, { attribution, maxZoom }).addTo(map);
    }

    function colorFor(type) {
      const t = String(type || "").toLowerCase();
      if (t.includes("free")) return "#f6b73e";    // gold
      if (t.includes("camp")) return "#f97b3c";    // orange
      if (t.includes("trail")) return "#74c0fc";   // blue
      return "#9be370";                            // green default
    }

    window.addEventListener("load", () => {
      // Map 1: USGS Topo (main point)
      const m1 = makeBaseMap("map1");
      m1.setView([LAT, LON], START_Z);
      addTileLayer(
        m1,
        "https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}",
        "Â© USGS"
      );
      L.marker([LAT, LON]).addTo(m1);

      // Map 2: OpenTopo + nearby circle markers (with tooltips)
      const m2 = makeBaseMap("map2");
      addTileLayer(
        m2,
        "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",
        "Â© OpenTopoMap (CC-BY-SA)",
        MAX_Z
      );

      const main = L.circleMarker([LAT, LON], {
        radius: 7, weight: 2, color: "#fff", fillColor: "#ff8400", fillOpacity: 0.95
      }).addTo(m2).bindTooltip("This place", { direction: "top", offset: [0,-8] });

      const group = [main];

      NEARBY.forEach(n => {
        const mk = L.circleMarker([n.lat, n.lon], {
          radius: 6, weight: 2, color: "#111", fillColor: colorFor(n.type), fillOpacity: 0.95
        }).addTo(m2)
          .bindTooltip(n.name, { direction: "top", offset: [0,-8] })
          .on("click", () => window.location.assign(`/seo/item/${n.slug}`));

        group.push(mk);
      });

      if (group.length > 1) {
        const bounds = L.featureGroup(group).getBounds();
        m2.fitBounds(bounds, { padding: [24,24], maxZoom: MAX_Z });
      } else {
        m2.setView([LAT, LON], START_Z);
      }
    });
  </script>

  <style>
    /* -------- Page-scoped only: safe for Explore & everything else -------- */
    .seo-item { --bg:#0b0b0b; --card:#141416; --muted:#b7b7b7; --pill:#2a2416; --gold:#f6b73e; --orange:#ff8400; --text:#f5f5f5; }
    .seo-item { color: var(--text); background: var(--bg); }

    .container { max-width: 1200px; margin: 0 auto; padding: 0 16px; }

    .hero { position: relative; padding: 56px 0 24px; }
    .hero-art { position:absolute; inset:0;
      background:
        radial-gradient(1200px 420px at 20% -120px, rgba(246,183,62,.24), transparent 60%),
        url("/images/hero/background-mountains2.png") center/cover no-repeat;
      opacity:.18; pointer-events:none;
    }
    .hero-content { position:relative; }
    .kicker { color: var(--gold); text-transform: lowercase; letter-spacing:.08em; margin-bottom:8px; }
    .hero h1 { font-size: clamp(28px, 5vw, 52px); margin: 0 0 10px; }

    .pills { display:flex; gap:10px; flex-wrap:wrap; }
    .pill { background: var(--pill); border:1px solid rgba(246,183,62,.45); color:#fff; padding:6px 10px; border-radius:999px; font-size:.9rem; }
    .pill--gold { background: rgba(246,183,62,.12); }

    .cta { display:flex; align-items:center; gap:12px; padding:18px 0 8px; }
    .btn { padding:12px 16px; border-radius:10px; text-decoration:none; font-weight:600; }
    .btn-primary { background: linear-gradient(90deg, var(--gold), var(--orange)); color:#111; border:none; }
    .btn-hollow { border:1px solid var(--gold); color:#fff; }
    .spacer { flex:1; }
    .backlink { color: var(--muted); text-decoration:none; }

    .grid { display:grid; grid-template-columns: 1fr 1fr; gap:20px; margin: 18px 0; }
    .card { background: var(--card); border:1px solid rgba(255,255,255,.06); border-radius:18px; padding:18px; }

    .mapcard { padding:0; overflow:hidden; }
    .maptitle { display:flex; justify-content:space-between; align-items:center; padding:12px 14px; border-bottom:1px solid rgba(255,255,255,.08); }

    .map { width:100%; height:360px; }
    .radar { display:block; border:0; width:100%; height:360px; }

    .muted { color: var(--muted); }
    .tiny { font-size:.85rem; }

    .facts { display:grid; grid-template-columns: repeat(2, minmax(0, 1fr)); gap:12px; margin:14px 0 4px; }
    .facts label { display:block; font-size:.85rem; color: var(--muted); margin-bottom:4px; }

    .desc h3 { margin-top:14px; }

    .nearby { display:grid; grid-template-columns: 1fr 1fr; gap:12px; }
    .nearby-card { display:block; padding:14px; border-radius:14px; background:#0f0f10; border:1px solid rgba(255,255,255,.06); text-decoration:none; color:#fff; }
    .nearby-title { font-weight:700; }
    .nearby-meta { color: var(--muted); margin-top:4px; }

    /* Keep header above Leaflet; prevent map controls floating over nav */
    :where(header, .site-header, nav, .navbar) { position: relative; z-index: 10; }
    .leaflet-container { z-index: 0; }

    @media (max-width: 980px) {
      .grid { grid-template-columns: 1fr; }
      /* mobile: keep maps < ~90% viewport height so scroll isnâ€™t trapped */
      .map { height: 54vh; max-height: 420px; }
      .radar { height: 54vh; max-height: 420px; }
      .nearby { grid-template-columns: 1fr; }
    }
  </style>
</BaseLayout>
