---
// /src/pages/new-blog.astro (only the map part changes)
import Layout from '../layouts/BaseLayout.astro';
import PostCard from '../components/PostCard.astro';

function getCover(frontmatter: any) {
  // Accept string or object { src, alt }
  const img = frontmatter?.thumbnail ?? frontmatter?.cover ?? frontmatter?.image;
  if (!img) return { src: '/images/hero/topo-dark4.png', alt: '' };
  if (typeof img === 'string') return { src: img, alt: frontmatter?.title ?? '' };
  return { src: img.src ?? '/images/hero/topo-dark4.png', alt: img.alt ?? (frontmatter?.title ?? '') };
}

const allPosts = Object.values(
  import.meta.glob('../content/blog/*.{md,mdx,markdown}', { eager: true })
).map((m: any) => {
  const fm = m.frontmatter ?? {};
  const cover = getCover(fm);
  return {
    url: m.url ?? fm.url,
    slug: fm.slug,
    title: fm.title ?? 'Untitled',
    excerpt: fm.excerpt ?? fm.description ?? '',
    date: fm.date ?? '',
    tags: fm.tags ?? [],
    coverSrc: cover.src,
    coverAlt: cover.alt,
    featured: fm.featured ?? false,
  };
});

// Sort newest first, build tags, choose featured – unchanged…
allPosts.sort((a, b) => (new Date(b.date).getTime() - new Date(a.date).getTime()));
const tagSet = new Set<string>(); allPosts.forEach(p => (p.tags || []).forEach((t: string)=>tagSet.add(t)));
const allTags = Array.from(tagSet).sort();
const featured = allPosts.find(p => p.featured) ?? allPosts[0];
const posts = allPosts.filter(p => p !== featured);
---


<Layout title="Blog — Trek4Free" description="Stories, trail notes, and map nerdiness from the road.">
  <section class="hero">
    <div class="hero__inner">
      <h1 class="hero__title">
        Trail Notes & Field Wisdom
      </h1>
      <p class="hero__sub">
        Trip reports, access tips, map tricks, and the occasional campfire rant.
      </p>
      <div class="hero__actions">
        <div class="chips" id="chips">
          <button class="chip chip--active" data-tag="__all">All</button>
          {allTags.map(t => <button class="chip" data-tag={t}>{t}</button>)}
        </div>
        <div class="search">
          <input id="search" type="search" placeholder="Search stories, places, tags…" />
        </div>
      </div>
    </div>
  </section>

  {featured && (
    <section class="featured">
      <a class="featured__card" href={featured.url ?? `/blog/${featured.slug ?? ''}`}>
        <div class="featured__media">
          <img src={featured.coverSrc} alt={featured.coverAlt} loading="lazy" />
          <div class="featured__badge">Featured</div>
        </div>
        <div class="featured__body">
          <div class="meta">
            <time>{new Date(featured.date).toLocaleDateString()}</time>
            {featured.tags?.length ? <span>• {featured.tags.join(' · ')}</span> : null}
          </div>
          <h2>{featured.title}</h2>
          <p>{featured.excerpt}</p>
          <div class="cta">Read the post →</div>
        </div>
      </a>
    </section>
  )}

  <section class="grid" id="grid">
    {posts.map(p => (
<PostCard
  href={p.url ?? `/blog/${p.slug ?? ''}`}
  title={p.title}
  date={p.date}
  cover={p.coverSrc}
  coverAlt={p.coverAlt}
  tags={p.tags}
  excerpt={p.excerpt}
/>

    ))}
  </section>

  <script>
    // Simple client-side search + tag filtering
    const grid = document.getElementById('grid');
    const cards = Array.from(grid?.querySelectorAll('[data-title]') ?? []);
    const search = document.getElementById('search') as HTMLInputElement;
    const chips = Array.from(document.getElementById('chips')?.querySelectorAll('.chip') ?? []);

    let activeTag = '__all';

    function applyFilter() {
      const q = (search?.value ?? '').toLowerCase().trim();
      cards.forEach((el: any) => {
        const title = el.dataset.title.toLowerCase();
        const excerpt = el.dataset.excerpt.toLowerCase();
        const tags = (el.dataset.tags || '').toLowerCase();
        const matchesText = !q || title.includes(q) || excerpt.includes(q) || tags.includes(q);
        const matchesTag = activeTag === '__all' || tags.split(',').includes(activeTag.toLowerCase());
        el.style.display = (matchesText && matchesTag) ? '' : 'none';
      });
    }

    chips.forEach((chip: any) => {
      chip.addEventListener('click', () => {
        chips.forEach(c => c.classList.remove('chip--active'));
        chip.classList.add('chip--active');
        activeTag = chip.dataset.tag;
        applyFilter();
      });
    });

    search?.addEventListener('input', applyFilter);
  </script>

  <style>
    :root{
      /* If you already have these in styles.css, these fallbacks won't hurt */
      --gold: #FFB224;
      --orange: #FF8B1A;
      --amber: #FFC53D;
      --ink: #0d0d0e;
      --panel: #151617;
      --muted: #a7a7a7;
      --ring: rgba(255,139,26,.35);
    }

    .hero{
      position: relative;
      padding: 72px 0 32px;
      background: radial-gradient(1200px 320px at 50% -10%, rgba(255,139,26,.18), transparent 60%),
                  linear-gradient(180deg, rgba(255,178,36,.06), transparent 60%),
                  #0d0d0e;
      overflow: hidden;
    }
    .hero::after{
      /* subtle topo / illustration vibe using your assets */
      content:"";
      position:absolute; inset:0;
      background: url('/images/hero/background-mountains-transparent.png') center/cover no-repeat;
      opacity:.12; pointer-events:none;
      mix-blend:screen;
    }
    .hero__inner{ width:min(1200px, 92%); margin:0 auto; position:relative; z-index:1;}
    .hero__title{
      font-size: clamp(2rem, 3.6vw, 3.25rem);
      letter-spacing:.02em;
      line-height:1.05;
      margin:0 0 .35rem;
      color: var(--amber);
      text-shadow: 0 2px 0 rgba(0,0,0,.35);
    }
    .hero__sub{
      color:#d8d8d8;
      max-width: 70ch;
      margin: 0 0 1.25rem;
    }
    .hero__actions{
      display:flex; gap:14px; align-items:center; flex-wrap:wrap;
    }
    .chips{ display:flex; gap:8px; flex-wrap:wrap;}
    .chip{
      background: #1b1c1e; color:#eaeaea; border:1px solid #26282b;
      padding:.45rem .75rem; border-radius:999px; font-weight:600; font-size:.9rem;
      transition:.2s ease; cursor:pointer;
    }
    .chip:hover{ border-color:#37393d; transform: translateY(-1px); }
    .chip--active{ background: var(--orange); color:#0a0908; border-color: transparent; }

    .search input{
      background:#121315; border:1px solid #232427; border-radius:10px;
      padding:.6rem .75rem; color:#eaeaea; min-width:260px;
      outline: none; box-shadow: 0 0 0 0 var(--ring);
      transition: box-shadow .15s ease, border-color .15s ease;
    }
    .search input:focus{ border-color:#2f3035; box-shadow:0 0 0 6px var(--ring); }

    .featured{ width:min(1200px, 92%); margin: 24px auto 18px; }
    .featured__card{
      display:grid; grid-template-columns: 1.1fr 1fr; gap:0; align-items:stretch;
      background: linear-gradient(180deg, #161718, #131416);
      border:1px solid #222426; border-radius:18px; overflow:hidden;
      text-decoration:none; color:inherit; box-shadow:0 10px 30px rgba(0,0,0,.35);
      transition: transform .18s ease, border-color .18s ease;
    }
    .featured__card:hover{ transform: translateY(-2px); border-color:#2a2c2f; }
    .featured__media{ position:relative; aspect-ratio: 16/9; overflow:hidden;}
    .featured__media img{ width:100%; height:100%; object-fit:cover; filter:saturate(.95) contrast(1.05);}
    .featured__badge{
      position:absolute; top:12px; left:12px;
      background:var(--orange); color:#100f0e; font-weight:800; font-size:.8rem; letter-spacing:.08em;
      padding:.35rem .55rem; border-radius:8px; box-shadow:0 6px 18px rgba(255,139,26,.35);
    }
    .featured__body{ padding:22px 22px 18px; display:flex; flex-direction:column; gap:.35rem;}
    .featured__body .meta{ color:#b8b8b8; font-size:.9rem;}
    .featured__body h2{ margin:.15rem 0; color:#f5f5f5; font-size: clamp(1.25rem, 2.2vw, 1.75rem);}
    .featured__body p{ color:#d7d7d7; margin: .25rem 0 .5rem; }
    .cta{ color: var(--amber); font-weight:800; margin-top:auto; }

    .grid{
      width:min(1200px, 92%); margin: 18px auto 60px;
      display:grid; grid-template-columns: repeat(12, 1fr); gap:18px;
    }
    @media (max-width: 1024px){ .featured__card{ grid-template-columns: 1fr; } }
    @media (max-width: 820px){ .grid{ grid-template-columns: repeat(6, 1fr);} }
    @media (max-width: 560px){ .grid{ grid-template-columns: repeat(2, 1fr);} }
  </style>
</Layout>
